name: Build Desktop App and Create Release

on:
  workflow_run:
    workflows: [Unit tests]
    types:
      - completed
    branches:
      - main

jobs:
  build:
    # Only run this job if the triggering workflow run was successful
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    name: Build for ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            args: '' # No specific target needed for default Linux build
          - os: macos-latest
            args: '--target aarch64-apple-darwin' # ARM Macs
          - os: macos-latest
            args: '--target x86_64-apple-darwin' # Intel Macs
          - os: windows-latest
            args: '' # No specific target needed for default Windows build

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        # Checkout the specific commit that triggered the workflow run
        with:
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Match .nvmrc if possible

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          # Install specific targets only on macOS runners
          targets: ${{ matrix.os == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Install Linux dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev build-essential curl wget file libssl-dev libayatana-appindicator3-dev librsvg2-dev

      # macOS dependencies (Xcode CLI) are usually pre-installed on GitHub runners
      # Windows dependencies (MSVC Build Tools, WebView2) are usually pre-installed

      - name: Install frontend dependencies
        run: npm install

      - name: Build Tauri app
        # Pass target args from matrix. Empty for Linux/Windows, specific for macOS
        run: npx tauri build ${{ matrix.args }}

      - name: Upload Artifact (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          # Use a consistent artifact name prefix for easy download later
          name: build-artifact-linux
          path: src-tauri/target/release/bundle/appimage/*.AppImage # Corrected path

      # Removed macOS compression step

      - name: Upload Artifact (macOS - Specific Arch DMG)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          # Use a consistent artifact name prefix and include architecture
          name: build-artifact-macos-${{ matrix.args == '--target aarch64-apple-darwin' && 'arm64' || 'x64' }}
          # Upload the generated DMG file
          # Path might be src-tauri/target/{target_triple}/release/bundle/dmg/*.dmg
          # Or src-tauri/target/release/bundle/dmg/*.dmg
          # Using wildcard to cover both possibilities
          path: src-tauri/target/**/release/bundle/dmg/*.dmg

      - name: Upload Artifact (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          # Use a consistent artifact name prefix
          name: build-artifact-windows
          path: src-tauri/target/release/bundle/msi/*.msi # Corrected path

  create-release:
    name: Create GitHub Release
    # Run after all build jobs are successful
    needs: build
    runs-on: ubuntu-latest
    # Grant permission to create releases
    permissions:
      contents: write
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          # Download all artifacts produced by this workflow run
          path: ./release-assets
          # Optional: Define pattern if needed, but downloading all is simpler here
          # pattern: build-artifact-*
          # merge-multiple: true # If using pattern, merge into one directory

      - name: Display structure of downloaded files
        run: ls -R ./release-assets

      - name: Create Release and Upload Assets
        uses: ncipollo/release-action@v1
        with:
          # Use the commit SHA from the triggering workflow for the tag
          tag: build-${{ github.event.workflow_run.head_sha }}
          # Name the release based on the commit
          name: Build ${{ github.event.workflow_run.head_sha }}
          # Point the release to the specific commit
          commit: ${{ github.event.workflow_run.head_sha }}
          # Add a description to the release body
          body: |
            Automated build artifacts for commit ${{ github.event.workflow_run.head_sha }}.
            These builds are unsigned. macOS users may need to right-click and select "Open" to bypass Gatekeeper.
          # Upload all files from the download directory and its subdirectories
          artifacts: "./release-assets/**/*.*"
          # Allow updating an existing release with the same tag (useful for reruns)
          allowUpdates: true
          # Mark as a pre-release
          prerelease: true
          # Set draft to false to publish immediately
          draft: false
          # Use the default GITHUB_TOKEN
          token: ${{ secrets.GITHUB_TOKEN }}
